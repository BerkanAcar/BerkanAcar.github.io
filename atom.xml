<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://berkanacar.github.io/atom.xml" rel="self"/>
  <link href="http://berkanacar.github.io/"/>
  <updated>2016-08-23T21:53:21+03:00</updated>
  <id>http://berkanacar.github.io/</id>
  <author>
    <name><![CDATA[Berkan Acar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Github]]></title>
    <link href="http://berkanacar.github.io/blog/2016/08/23/github/"/>
    <updated>2016-08-23T17:50:01+03:00</updated>
    <id>http://berkanacar.github.io/blog/2016/08/23/github</id>
    <content type="html"><![CDATA[<h3>Github Komutları</h3>

<p>Sizlere Linux Yaz Kampında anlatılanları anlatacağım. Öncelikle github komutlarından başlamak istedim. Daha önceki yazımda bunlara biraz değinmiştim. Fakat yeni öğrendiğim bazı şeylerde var. Bunlarıda size aktarmak istiyorum.</p>

<ul>
<li>git config &ndash;global user.name</li>
</ul>


<p class="silik">Bu komut ile global kullanıcı adımızı öğrenebiliriz.</p>


<ul>
<li>git config &ndash;global user.email</li>
</ul>


<p class="silik">Aynı şekilde global mail adresimizi öğrenebiliriz.</p>


<ul>
<li>git log</li>
</ul>


<p class="silik">Yapmış olduğumuz tüm commitleri görmek istiyorsak bu komutu kullanmak yeterlidir. Burada commit numaraları da mevcuttur. Daha sonra istediğimiz bir commit'e dönmek için o numaraları kullanacağız. q tuşuna basarak tekrar komutlarımızı yazabiliriz.</p>


<ul>
<li>git reset c79836bc4f5194e7ad7789652610c7aaaa6baa28</li>
</ul>


<p class="silik">Commitlerimize baktık. Eğer istemediğimiz bir commit yaptıysak ya da yanlış commit mesajı yazmışsak hiç endişelenmeyin. Bunun için bu komutu kullanbiliriz. Bu komutla seçmiş olduğumuz son commit'e geri döneriz ve değişikliklerimiz commit'lenmek için bizi bekliyor olacaktır. Sonra tekrar commit edebiliriz. Burada reset'ten sonra yazanlar yukarıdaki komutla öğrendiğimiz commit numaralarıdır.</p>


<ul>
<li>git reset &ndash; hard c79836bc4f5194e7ad7789652610c7aaaa6baa28</li>
</ul>


<p class="silik">Eğer ben değişikliklerimi korumak istemiyorum. Son commit'te ne yaptıysam onlar olsun. Ondan sonra yapılanlar gitsin diyorsanız bu komutu kullanabilirisiniz. Bunu kullanırken onu yapmak istediğinize emin olmalısınız. Aksi halde geri aldığınız committen sonraki tüm değişiklikler kaybolur ve yeniden yazmak zorunda kalırsınız.</p>


<ul>
<li>git diff</li>
</ul>


<p class="silik">Commit'lemeden önce yapmış olduğumuz değişiklikleri bize gösterir. git status'den farkı o sadece dosyadaki değişiklikleri gösterirken bununla dosya içindeki değişiklikleri görebiliriz.</p>


<ul>
<li>git checkout .</li>
</ul>


<p class="silik">Yapmış olduğumuz değişiklikleri silmek istiyorsak yani son commit'e geri dönmek istiyorsak farklı bir yöntem de bu komutu kullanmaktır. Burada sadece commit'ten sonra bir değişiklik yapılmışsa onlar geri alınacaktır. Bunu kullanırken de dikkatli olmalısınız. Aksi halde yaptığınız tüm değişiklikleri kaybedersiniz.</p>


<ul>
<li>git checkout -b branch_name</li>
</ul>


<p class="silik">Yeni bir branch açmak için kullanırız. Branch_name yazan yerine isim vererek kullanbiliriz.</p>


<ul>
<li>git checkout branch_name</li>
</ul>


<p class="Branch'ler arası geçiş yapmak için kullanırız. Burada birden fazla açılmış branch'lerimiz varsa bu komut sayesinde geçiş yapabiliriz."></p>


<ul>
<li>git branch</li>
</ul>


<p class="ilik">Bu komutile hangi branch'de olduğumuzu öğrenebiliriz. Böylece işlemlerimizi kolaylıştırabiliriz.</p>


<ul>
<li>git push origin branch_name</li>
</ul>


<p class="silik">Çalışmış olduğumuz branch'e değişikliklerimizi göndermek için bu komutu kullanabiliriz.</p>


<ul>
<li>Origin bizim karşı taraftaki repomuzu gösterir. Master ise hangi branch'imize ekleme yapacağımızı gösterir.</li>
<li>git merge branch_name</li>
</ul>


<p class="silik">Branch'e gönderilen kodları merge etmek için bu komutu kullanırız.</p>


<ul>
<li>git pull origin branch_name</li>
</ul>


<p class="silik">Branch adını yazarak o branch'e commit'lenen kodu kendimize almak için kullanırız.</p>


<p>Yapabileceklerimiz tabi ki bunlarla sınırlı değildir. Daha fazla şeyler yapmak istiyorsak kendimizi daima geliştirmeliyiz ve bunun için kaynak olarak try.github.io adresinden daha fazla bilgi öğrenebiliriz.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Workshop]]></title>
    <link href="http://berkanacar.github.io/blog/2016/07/31/workshop/"/>
    <updated>2016-07-31T22:29:14+03:00</updated>
    <id>http://berkanacar.github.io/blog/2016/07/31/workshop</id>
    <content type="html"><![CDATA[<p><html>
<head>
    <title></title>
</head>
<body>
    <h3>GitHub</h3>
    <p class="paragraf">
        Linux işletim sistemlerinde GitHub'a proje nasıl atılır? Yazımda bu işlemleri terminalden yapacağız. Ve tabiki git'e bir proje eklemek istiyorsak bir Git hesabımız olmalıdır. GitHub üyeliğimiz yoksa github.com adresinden yeni bir üyelik açarak başlayabiliriz. Daha Git'ten sonra yeni bir depo açıyoruz ve bir isim belirliyoruz. Daha sonra Git'e eklemek istediğimiz dosya dizini içine girdikten sonra aşağıdaki kodları çalıştırmalıyız.
    </p>
    <b>
        $git init
    </b>
    <p class="silik">
        bu kod satırı ile o dosya içerisinde git'e yeni bir depo(repository) açarız.
    </p>
    <b>
        $git status
    </b>
    <p class="silik">
        bu komut ile git'e eklenecek dosyaların durumuna bakarız. Dosyalar üzerinde bir değişiklik olmuşsa ya da daha önce ekleme olmamışsa kırmızı renkli dosyaların mevcut olduğunu göreceksiniz.
    </p>
    <b>
        $git add .
    </b>
    <p class="silik">
        dosyalrı Git'e eklemek için devam ediyoruz.
    </p>
    <b>
        $git status
    </b>
    <p class="silik">
        tekrarbu komut ile dosyaların yeşil renkli olduğunu görürüz. Bunun anlamı dosyaların atılmaya hazır olduğu anlamına gelir.
    </p>
    <b>
        $git commit -m &ldquo;your_commit_message&rdquo;
    </b>
    <p class="silik">
        Git'te commit mesajlarının önemli bir yeri vardır Mesajların İngilizce ve emir kipli olmasına dikkat etmeliyiz. Bu mesajlar sayesinde projenizin adımları dışarıdan birisi neler yaptığına ve değişikliklerine bakarak anlayabilir. Hatta GitHub'dan iş teklifi bile alabilirsiniz.
    </p>
    <p class="paragraf">
        Şu ana kadar yapılan tüm işlemler local'dedir. Daha Git'e gönderim yapılmamıştır. Şimdi gelelim bu kodaların GitHub sayfamızdaki projede görünmesine.
    </p>
    <b>
        $git remote add origin git@github.com:your_username/your_project_name.git
    </b>
    <p class="silik">
        şimdi Git ile bağlantısını kuralım. Zaten bu oluşturduğunuz boş depo içerisinde görünecektir. O sayfadan kopyala-yapıştır yaparak alabilirsiniz.
    </p>
    <b>
        $git push -u origin master
    </b>
    <p class="silik">
        ve son olarak dosyaları GitHub'a gönderiyoruz. GitHub'daki depodan kontol edebiliriz. Proje üzerinde herhangi bir değişiklik yaptıktan sonra değişiklikleri güncellemek için yukarıdaki adımları tekrar yaparak devam edebilirsiniz. Sadece &lsquo;git remote&rsquo; komutunu ilkadımda kullanıyoruz daha sonra yazmıyoruz.
    </p>
    <h3>MVC (Model:View:Controller)</h3>
    <p class="paragraf">
        Öncelikle bu katmanların ne yaptığından kısaca bahsedelim. Model katmanında projemizin veri tabanı işlemleri yürütülür. Controller katmanı ile sayfaların yönetildiği kısımdır. View katmanı ise tüm bu işlemlerin kullanıcı tarafından görülen kısmıdır. Tüm bunların çalışma mantığı ise Client(kullanıcı) tarafından gönderilen istek önce controller'a ulaşır(request). Daha sonra controller verileri toplamak(data collection) için model'e başvurur ve model ise database'den yani veritabanından bilgileri alır. Daha sonra model controller'a gönderir. Daha sonra view katmanına ulaşır. Orada yazılan html, css vb. yazılan kodalara göre görsel kısım tekrar controller aracılığı ile client'a ulaşır(response).
    </p>
    <p class="paragraf">
        NedeN MVC kullanıyoruz diyecek olursak temiz kod yazmak için kullanışlı, hızlı ve başkaları tarafından okunabilir bir kod yazmak öncelikli planlarımız arasında olmalıdır. Bu sayede temiz kod yazmış olacağız. Ve bu katmanlarla farklı yerlerden birbirlerini yöneterek işlem kolaylığı sağlayacaktır. Bu sayede günlerce uğraştığımız işlemleri daha kısa sürede tamamlayabiliriz.
    </p>
    <h3>ORM (Object Relational Mapping)</h3>
    <p class="paragraf">
        Kısaca orm bizim yerimize nesneleri ilişkisel veritabanı tablomuza bağlayan ve veri alış-verişini sağlayan bir tekniktir. Avantajları:
        <li>
            Nesneye dayalı bir programlama metodu sunarak işlerimizi kolaylaştırıyor.
        </li>
        <li>
            Yazdığımız kodun veritabanı çeşitleriyle bir alakası yoktur.
        </li>
        <li>
            En önemlisi ise veritabanı kodları yazmadan çok kolay ve basit bir şekilde veritabanına bağlı bir uygulama yazılabilir.
        </li>
    </p>
    <h3>GEM CYBELE</h3>
    <p class="paragraf">
        Bu gem ile birlikte admin ve user yapıları hazır olarak kurulmuş ve ayarlamaları yapılmış bir şekilde kullanıma hazırdır. Tek yapmamız gereken bu gem'i kurdaktan sonra projemizi içine dahil etmek olacaktır. Bu gem sayesinde projelerimizi daha hızlı bir şekilde geliştirmemiz mümkün olacaktır. Biraz projede geçen gem'lerden bahsedelim.
        <li>
            gem &lsquo;devise&rsquo;: User giriş-çıkış, hesap açma işlemleri için yaygın olarak kullanılan bir gem'dir.
        </li>
        <li>
            gem &lsquo;paperclip&rsquo;: Dosya eklemek için kullanılan gem'dir.
        </li>
        <li>
            gem &lsquo;hierapolis-rails&rsquo;: Projemize dışarıdan yönetici olarak erişerek kullanıcıları ve bazı durumları yönetmek için kullanılır.
        </li>
    </p>
    <p class="paragraf">
        Yukarıda bahsi geçen Cybele içindeki gem'lerden sadece bir kaçıdır. Diğer gem'leri github/lab2023/cybele sayfasını ziyaret ederek inceleyebilirsiniz. Şimdi gelelim bu gem'i nasıl kuracağımıza. Kurulumu yapmadan önce ruby ve rails versiyonunuzu kontrol etmeyi unutmayınız.
        <li>
            Ruby ~> 2.3
        </li>
        <li>
            Rails ~> 4.2
        </li>
        En azından yukarıdaki versiyonların mevcut olması gerekir.
    </p>
    <p class="paragraf">
        Versiyon kontrollerini yaptıktan sonra şimdi cybele gem'ini kurabiliriz. Bu işlemleri yine terminalden yapıyoruz.</br></br>
    </p>
    <p class="silik">
        $gem install cybele
    </p>
    <p>
        Şimdi kurduğumuz gem ile bir proje oluşturalım.
    </p>
    <p class="silik">
        $cybele project_name
    </p>
    <p>
        Şimdi gelelim projeyi çalıştırmya. Sırasıyla aşağıdaki kodları terminalde çalıştıralım.
    </p>
    <p>
        $bundle install
    </p>
    <p>
        $redis-server
    </p>
    <p>
        $rake sidekiq:start
    </p>
    <p>
        $rake db:create
    </p>
    <p>
        $rake db:migrate
    </p>
    <p>
        $rake dev:seed
    </p>
    <p>
        $rails s
    </p>
    <p>
        Yukarıdaki adımların eksiksiz yapıldığından emin olduktan sonra cybele çalışmaya hazır hale gelmiştir. Artık üzerinde değişiklik yapabilir ve üzerine farklı gem'ler ya da farklı özellikler tanımlayabiliriz.
    </p></p>

<p></body>
</html></p>
]]></content>
  </entry>
  
</feed>
