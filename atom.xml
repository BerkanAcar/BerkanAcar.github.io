<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://berkanacar.github.io/atom.xml" rel="self"/>
  <link href="http://berkanacar.github.io/"/>
  <updated>2016-08-30T22:55:26+03:00</updated>
  <id>http://berkanacar.github.io/</id>
  <author>
    <name><![CDATA[Berkan Acar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Lyk-2]]></title>
    <link href="http://berkanacar.github.io/blog/2016/08/30/lyk-2/"/>
    <updated>2016-08-30T21:47:23+03:00</updated>
    <id>http://berkanacar.github.io/blog/2016/08/30/lyk-2</id>
    <content type="html"><![CDATA[<h3>Linux Yaz Kampı Günlüğü -10.08.2016-</h3>

<p class="paragraf">En son kaldığımız yerden yazmaya devam ediyorum. Öncelikle byebug gem'inden bahsedeceğim. Byebug nedir diye soracak olursanız. Bir nevi breakpoint olarak düşünebilirsiniz. Yazıldığı yere kadar çalışır ve işlemi orada keser. Aşağıda örneği mevcuttur.</p>


<pre><code>def show
    byebug
end
</code></pre>

<p class="paragraf">Şimdi daha önce oluşturmuş olduğumuz ideas controller'ı içine action'lar oluşturabiliriz. Bunları tek tek burada amlatmayacağım. Zaten bunun için rails'in dökümantasyonu mevcuttur. Oradan bakabilirsiniz. Şimdi show action'ı oluşturduğumuzu varsayalım. Bunun routes ayarlamlarını yapıp views/ideas altında show.html.erb dosyası oluşturmamız gerekiyor. Yine bu show dosyasını dökümantasyondan bakarak doldurabilirsiniz.</p>


<pre><code>&lt;a href="http://berkanacar.github.io/ideas/&lt;%= idea.id %&gt;"&gt;&lt;%= idea.title %&gt;&lt;/a&gt;
</code></pre>

<p class="silik">Burada yine index.html.erb oluşturduğumuzu varsayarak onun içerisine idea'nın title'nı link olarak kullanıcıya gösterip, o title'a ait id'ye gitmesini sağlayarak yol gösterdik. Tabi yine bunu bu şekilde yapmıyoruz. Rails bizim için her konuda kolaylıklar sağladığı gibi burada da sağlamış. Bunun için prefixler mevcuttur. İlerleyen satırlarda da onlardan bahsedeceğim.</p>


<pre><code>&lt;a href="http://berkanacar.github.io/ideas"&gt;Back to list of ideas&lt;/a&gt;
</code></pre>

<p class="silik">Yine show dosyası içinden index'e back linki verdik. Şimdilik bunları html taglar'i ile gösteriyorum.</p>


<pre><code>get 'ideas/:id', to: 'ideas#show', as: 'idea'
</code></pre>

<p class="silik">Burada show için routes örneğini gösterdim. Burada farklı olarak as kullandık. Göstermemdeki asl amaçta buydu. Bunun anlamı az önce bahsetmiş olduğum prefix'lerle ilişkilidir. Aşağıda örneği mevcuttur.</p>


<pre><code>Prefix      Verb   URI Pattern                            Controller#Action
ideas       GET    /ideas(.:format)                       ideas#index
            POST   /ideas(.:format)                       ideas#create
new_idea    GET    /ideas/new(.:format)                   ideas#new
edit_idea GET    /ideas/:id/edit(.:format)              ideas#edit
  idea      GET    /ideas/:id(.:format)                   ideas#show
            PATCH  /ideas/:id(.:format)                   ideas#update
            PUT    /ideas/:id(.:format)                   ideas#update
            DELETE /ideas/:id(.:format)                   ideas#destroy
</code></pre>

<p class="paragraf">Burada idea için tüm prefix'ler mevcuttur. Yapıyı bozmamak gerekiyor. Kodun anlaşılabilir olması için bunlar önemli noktalardır. Gelelim şimdi asıl konumuza. Biz az önce show sayfasına bir link vermiştik. Bunu rails'in link_to methodu ile de yapabiliriz.</p>


<pre><code>&lt;%= link_to 'show', idea_path %&gt;
</code></pre>

<p class="silik">Bunu prefix yardımıyla orada yazan prefix adıyla path yazarakta link verebiliriz. Bundan sonra link_to kullanmanız tavsiye edilir. Ve bunların yanlarında verb'leri mevcuttur. Show için method belirtmeye gerek yoktur. Zaten default olarak bunu alıyor. Method kullanımını ilerleyen yazılarımda anlatacağım.</p>


<pre><code>rake db:reset
</code></pre>

<p class="silik">Hatırlarsanız önceki yazımda veritabınını sırasıyla drop, create, migrate ve seed etmiştik. Bu komut tek başına 4'ünü birden çalıştırıyor. Amele gibi yine tek tek yazmaya gerek kalmıyor.</p>


<pre><code>protect_from_forgery with: :exception
</code></pre>

<p class="silik">Application controller'ı içinde mevcut olan bu kod satırı ile birisi uygulamamızda sürekli post göndermesin diye rails bizim için böyle bir güzellik yapmış. Ama biz form_for kullanmazsak burada hata alıyoruz. Projemize ilk başladığımızda html ile form oluşturma anlatılmıştı. Biz de o süre boyunca bu komutu yorum satırı olarak bırakıp kullanabiliriz. Ama tabi bunu yapmıyoruz. Buradan anlayacağınız üzere rails'de formları form_for ile oluşturuyoruz.</p>


<pre><code>&lt;input type="hidden" name="authenticity_token" value="&lt;%= form_authenticity_token %&gt;"&gt;
</code></pre>

<p class="silik">Yukarıda ki açığı gidermek için hidden field olarak bu komutu form oluşturuken yazıyoruz. Bu sayede güvenlik açığnı kısmen çözmüş oluyoruz. Ama biz yine de form_for kullanmaya özen gösterelim.</p>


<pre><code>private
    def idea_params
        params.require(:idea).permit(:title, :description, :planned_to)
    end
</code></pre>

<p class="silik">Burada ideas controller'ında form oluşturma işlemleri için private altında idea_params adında method oluşturduk. Bu sayede kullanıcının form oluştururken orada belirtilen field'ler dışında başka bir field göndermesinin önüne geçmiş olduk. Bunu da aşağıdaki şekilde kullanabiliriz.</p>


<pre><code>@idea = Idea.new(idea_params)
</code></pre>

<p class="silik">Eğer bu şekilde kendimizi sağlama almasaydık aşağıdaki gibi kullanacaktık.</p>


<pre><code>@idea = Idea.new(params.require(:idea).permit(:title, :description, :planned_to))
</code></pre>

<p class="paragraf"> Bu şekilde de kullanım mevcuttur. Fakat biz bunu daha sonra da kullanacağımız için method olarak yazmamız ve bunu da private olarak belirterek dışarıdan erişimi kapatmış oluyoruz.</p>


<pre><code>def create
    @idea = Idea.new(idea_params)
    if @idea.save
        redirect_to idea_path(@idea)
    else
        render :new
    end
end
</code></pre>

<p class="silik">Burada create action örneği mevcuttur. Eğer kayıt olursa show'a redirect oluyor. Yani bizi yönlendiriyor. Else'de ise validasyondan geçmemiş demektir ve render new ile aynı sayfada kalarak aşağıdaki komut ile hata mesajını ekrana basabiliriz.</p>


<pre><code>&lt;% if @idea.errors.any? %&gt;
    &lt;h3&gt;
        &lt;%= @idea.errors.full_messages.join(", ") %&gt;
    &lt;/h3&gt;
</code></pre>

<p>  &lt;% end %></p>

<p class="silik">Idea'ya ait hataları bulup virgül ile ayırdıktan sonra ekrana bastırabiliriz. Bunu da new.html.erb içine yazıyoruz. Bu gecelik anlatacaklarım bu kadar. İlerleyen yazılarımda konulara devam edeceğim.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LYK-1-]]></title>
    <link href="http://berkanacar.github.io/blog/2016/08/24/lyk-1/"/>
    <updated>2016-08-24T13:59:53+03:00</updated>
    <id>http://berkanacar.github.io/blog/2016/08/24/lyk-1</id>
    <content type="html"><![CDATA[<h3>Linux Yaz Kampı Günlüğü</h3>

<p class="paragraf">Öncelikle böylesine güzel bir etkinliğe gitmemize olanak sağlayan, orada böylesine güzel bir etkinliği organize eden ve emeği geçen herkese çok teşekkür ederim. Umarım bunun devamı olur ve bizler gibi niceleri bu kamptan faydalanabilirler. Tabi bunun için bizlere de biraz görev düşüyor. Nasıl mı? Öğrendiklerimizi kendimize saklamak yerine kendimizi geliştirip hoca olmak için kampa başvurabiliriz. Böylelikle daha çok öğrenciye ulaşma fırsatını yakalamış oluruz ve daha çok kişinin bu kamptan fayda görmesini sağlayabiliriz. Bu da muhteşem bir duygu olmaz mıydı?</p>


<p class="paragraf">Kampa staj yaptığımız şirketin yönlendirmesiyle 9 kişiyle beraber gitmeyi planladık. Benim için ilk linux yaz kampı deneyimi olacaktı. Daha önce 2 sefer akademik bilişim kurslarına katılmıştım. Fakat bunun kadar günleri uzun değildi. Kursa gitmeden önce arkadşlarla beraber aramızda ortak karar alıp otobüs bileti alıp yola koyulmak için hazırlandık. Denizli'den Bolu'ya sadece tek firma direk sefer yapıyordu ve gece 10'da binecektik. O firma konusunda ne kadar endişelerimizde olsa aktarma yapmak yerine yine risk alarak tercih ettik. Gece arabaya bindikten sonra uzun bir yolculuk bizi bekliyordu. Ben ne kadar gece yolculuğunu ve arabada uyumayı sevmesemde uyumak zorundaydım. Yoksa ertesi gün kursta bir hayli zorlanabilirdik. Sabah otogora indik ve üniversitenin yoluna düştük. Üniversiteye vardığımızda kayıt masalarından kayıt yaptırıp yaka kartlarımızı aldık. Öğlen 13:30 gibi konferans olacağını öğrendikten sonra yurda kayıt olmaya karar verdik. O ara baya bir boşluğumuz vardı. Yurda gitmek için tekrar otobüse bindik. Yurda geldik ve linux yaz kampı öğrencisi olduğumuzu söyleyip güvenlikten içeri girdik. Daha sonra kayıt işlemleri için başka bir binaya gittik ve kayıt işlemlerini yaptırdık. Tabi bu bu kadar da kolay olmadı. Çünkü önce para yatırmamız gerekiyordu. Bunun için bir atm arayışı başladı. Her kafadan farklı bir ses çıkıyordu. Şurda var para vermiyor. Burda var bozuk gibi söylentiler yayılmıştı. Biz oranın yakınında bir tane olduğunu duyduk ve oraya doğru yola çıktık. Atm'yi bulduk ve çalışıyordu. Önümüzde 4-5 kişi falan vardı. 3 kişi de biz vardık. Atm paraları taksit taksit aldığı için yatırma işlemi biraz uzun sürüyordu. Zamanı hatırlamıyorum ama 1 saat kadar güneşin altında beklemişizdir. Parayı yatırdıktan sonra yurda geri geldik ve işlemleri tamamladık. Giriş kartlarımızı aldık. O gün cuma olduğu için vakitte gelmişti. Odaya çıkıp eşyaları bıraktıktan sonra cuma'ya gittik. O ara yeni arkadaşlarla tanışmıştık. Okula da tekrar hep beraber gitmiştik. Tek kapılı ufak bir arabası vardı. Fakat biz ona rağmen 5 kişi zorda olsa binerek okula gitmiştik. Biz gittiğimizde konferans yenice başlamıştı. Konferansın bir kısmında uyuduğum için çok fazla bir şey hatırlamıyorum.</p>


<p class="paragraf">Konferanstan sonra sınıflara geçtik. O ara biz nereye gitmiştik tam hatırlayamadım fakat derse biraz geç kalmıştık ve sınıf tıklım tıklımdı. Oturacak bir yer yoktu. Biz gelince front end sınıfı ile yer değiştirdik. Fakat oraya da sığamadık. Daha sonra ek sıralar getirildi. Yerleştik. Malum her sene olduğu gibi kurulumları yapmadan gelenler olmuştu. İlk gün kurulumları yükleme kararı alındı ve kurulumu yapılmış olanlar çıkabilirdi. Ama biz kurulum yapılmış olmasına rağmen sınıfta kalma kararı aldık. Yapacak bir şeyimiz yok gibi görünüyordu. Ama o gün belediyenin kapanma saatini hesaplamadığımız için öğrenci kartı çıkarma işlemi pazartesi'ye sarkmıştı. Sonra yurda geçtik. Akşam yemeği yemiştik. Ben yine her zamanki gibi yemek seçiyor çıkan yemeklere burun kıvırıyordum. Ama iyi kötü karnımızı doyurmuştuk. Sonra dinlenmek için odalarımıza çekildik.</p>


<p class="paragraf">Ertesi gün sabah kalktık. Kahvaltıya indik. Ziyafet çeker gibi bir kahvaltı yaptık. Haliyle biraz hesap kabarık olmuştu. Daha sonra okula geçtik. Bize yeni bir sınıf ayarlanmıştı. En azından artık kimse ayakta kalmıyordu. Daha sonra tüm hocalarımızla teker teker tanıştık ve kendimizi tanıttık. Hangi okuldan geldiğimiz, daha önce hangi dilleri kullandığımız gibi konulardan bahsettik. Daha sonra önceki blog yazımda bahsetmiş olduğum konularla giriş yaptık. Ogün akşama kadar sürmüştü. Akşam da biraz ruby anlatıldı. Ve sınıfta yapmamız için ödev verildi. Cümlenin palindron olup olmadığını kontrol edecektik.</p>


<pre><code>#require 'turkish_support'&lt;/br&gt;
#using TurkishSupport

def palindron kelime
    print "Bir kelime giriniz:"
    kelime = gets.chomp
    if kelime.downcase == kelime.downcase.reverse
        puts "Kelime palindromdur."
    else
        puts "Palindrom olmayan bir kelimedir."
    end
end

def parse cumle
    print "Cumle gir:"
    cumle = gets.chomp
    if cumle.downcase.gsub(/\W/,"") == cumle.downcase.gsub(/\W/,"").reverse
        puts "yaşa len"
    else
        puts "hadi len"
    end
end
puts palindron @kelime
puts parse @cumle
</code></pre>

<p class="paragraf">Verilen ödevi yapmıştık. Tabi hocanın yazdığı bundan çok daha kısa olmuştu. Bizde hala bir C mantığı yatıyordu. Daha sonra evde yapmamız için birbaşka ödev daha verilmişti. Onuda yapmıştık. Zaten her sabah gidişimizde verilen ödevler soruluyordu. Tabi aramızda yapmayan çok kişi oluyordu. Netice de adı ödev bir kere yapılmak için olmamış ki :). Sonraki bir kaç günü gün hatırlamıyorum. Fakat daha sonra rails anlatılmaya başlanmıştı. İlk olarak ruby ve rails versiyon kontrolleri ile başladık. Bende rails 4.2 vardı ve rails 5 kullanacağımızı söylediler. Hemen sürüm yükseltmesi yaptık ve rails kodlamaya hazırdık. Artık terminalden birşeyler yazabilecektik. Ve başlıyoruz.</p>


<pre><code>rails new project_name -d postgresql
</code></pre>

<p class="silik">Rails ile yeni bir proje oluşturmak için kullanıyoruz. Eğer veritabanı türünü belirtmezsek default olarak sqlite ile oluşturuyor. Fakat biz kurstayken sürekli postgresql üzerine çalıştık.</p>


<pre><code>bundle || bundle install
</code></pre>

<p class="silik">İki komutta aynı işlemleri yapıyor. Artık hangisi kolayınıza gelirse. Bunu da projemizde gemfile içinde olan gem'leri yüklemek için yapıyoruz. Aksi halde proje çalışmaz. İşin ilginç tarafı rails'de bir gem'dir.</p>


<p class="paragraf">Gem ne diye soracak olursanız. Kısacası rails yazarken daha önceden başkalarının yazıp paket haline getirdiği kodları bizim projemizde kullanmamızdır. Böylece proje yaparken işlerimizi çok daha hızlı bir şekilde yapabiliriz. Benim arkadaşlarıma sürekli verdiğim bir örnek vardır. Mesela bir araba yapmak istiyorsan en baştan arabanın tüm parçalarını yapmazsın. Tekerlek, koltuk, direksiyon, kaporta gibi parçaları birer gem olarak düşünün. Sizin asıl amacınız araba yapmaksa asıl işiniz de bu olmalıdır. O yüzden siz sadece bu parçaları birleştirirsiniz ve bir ürün ortaya koyarsınız. Araba da sizin yapacağınz proje olarak düşünülebilir.</p>


<pre><code>rails generate controller Ideas
</code></pre>

<p class="silik">Idea için controller oluşturduk. Buna neden ihtiyaç var derseniz? view'den gelen request controller üzerinden model'e erişiyor. Ve önceki yazımda bahsettiğim gibi mvc ile temiz kod yazma imkanı doğuyor. Ayrıca controller adını yazdıktan sonra yanına action isimlerini peş peşe ekleyebiliriz. Action'lar ise aynı isimli view'lere bağlıdır. index action'ı varsa onu kullanıcaya göstermek için bir tanede index.html.erb olmak zorundadır. Mesela aşağıda index action örneği gösterilmiştir.</p>


<pre><code>def index
    @ideas = Idea.all
end
</code></pre>

<p class="silik">Burada ideas değişkeni içine birazdan oluşturacağımız tüm idea'ları dahil ettik ve burada @ kullanarak bu sınıf değişkenini dışarda kullanıma hazır hale geirdik. Bunu da index.html.erb içinde kullanarak tüm idea'ları listelemek için kullanabiliriz.</p>


<pre><code>get 'ideas/new', to: 'ideas#new'
</code></pre>

<p class="silik">Daha sonra bu action'lar için config/routes içine bu kodları yazarak yol gösteriyoruz. Bunu her action için yapmamız gerekiyor. Fakat biz yine bunları amele gibi yazmayacağız. İlerleyen yazılarımda bunlardan da bahsedeceğim.</p>


<pre><code>rails generate model Idea title:string description:text
</code></pre>

<p class="silik">Burada yeni bir model oluşturuyoruz ve veritabanına erişim bu model üzerinden sağlanıyor. Attribute türlerini eğer yanlarında belirtmezsek default olarak string atanır. Yani amele gibi her defasında string olan türler için yazmamıza gerek kalmaz. Ayrıca generate yerine kısaca g yazabiliriz.</p>


<p class="paragraf">Idea adında bir model oluştu ve db migration altnda bir veritabanı oluşturuldu. Bu dosyayı açarak migrate yapmadan içinde değişiklikler yapabiliriz.</p>


<pre><code>rails db:migrate
</code></pre>

<p class="silik">Veritabanı oluşturulduktan sonra kullanıma hazır hale getirmek için migrate etmemiz gerekiyor. Migrate ettikten sonra bu dosya içinde herhangi bir değişiklik yapamayız.</p>


<pre><code>rails db:rollback || rails db:rollback STEP 2
</code></pre>

<p class="silik">Eğer yanlış birşeyler yazmış ve migrate etmişsek teleşa kapılmaya gerek yok. Rollback yaparak migrate işlemini geri alabiliriz. Geri aldıktan sonra içinde değişiklik yaptıktan sonra tekrar migrate etmeliyiz ki çalışabilsin. Eğer yaptığımız migration bir kaç adım geride kalmışsa bunun kullanımı pek tavsiye edilmez ama yine de böyle bir yöntem vardır. Step ile yanına yazılan sayı kadar geriye dönebiliriz.</p>


<pre><code>rails db:migrate:status
</code></pre>

<p class="silik">İlk migrate'imizden sonra bu komut ile durumuna bakabiliriz. Burada up migrate yapılmış olanlar down ile de yapılmamış olanları gösterir ve buradaki migration'larımız oluşturulma sıralarına göredir. Buradan da rollback adımlarına bakabilirsiniz.</p>


<pre><code>rake db:migrate VERSİON=20080906120000
</code></pre>

<p class="silik">Migrate yaparken down olanların tümü sırasıyla migrate olacaktır. Fakat ben hepsini migrate etmek istemiyorum diyorsan version numarısını yazarak o versiyona kadar olan migration'ları migrate edebilirsin. Unutulmaması gereken bir konu hiç bir zaman arada down yani migrate edilmemiş migration kalmaz. Çünkü bunlar sırayla çalışmaktadırlar.</p>


<pre><code>rails db:drop
</code></pre>

<p class="silik">Bu komut ile veritabanında oluşturduğumuz verileri silebiliriz. Fakat bundan sonra bir kaç komut daha yazmamız gerekecek.</p>


<pre><code>rails db:create

rails db:migrate

rails db:seed
</code></pre>

<p class="silik">Seed dosyamızda eklenmiş veritabanı verileri varsa çalıştırabiliriz. Yoksa gereksiz yazmış oluruz. Yani her seferinde ben projeye elle veriler eklemek istemiyorum diyorsanız seeds.rb dosyası içine yazarak bunu çalıştırdıktan sonra o veriler sizin için oluşturulmuş olacaktır. Aşağıda örneği gösterilmiştir.</p>


<pre><code>Idea.create(title: 'Süper Fikir', description: 'Harika olmuş')
</code></pre>

<p class="paragraf">terminalden rails c yazarak konsolu çalıştırıyoruz. Daha sonra burada veritabanı işlemlerini yürütebiliriz.</p>


<pre><code>i = Idea.new
</code></pre>

<p class="silik">Boş bir tane idea nesnesi oluşturulur ve bu i değişkenine atanır. Eğer new kullanırsak save etmek zorundayız.</p>


<pre><code>i = Idea.first
</code></pre>

<p class="silik">i değişkenine ilk idea'yı atadık.</p>


<pre><code>i.title = 'Benim Fikrim'
</code></pre>

<p class="silik">Title attribute için bir değer atadık.</p>


<pre><code>i.save
</code></pre>

<p class="silik">Yukarıda söylediğim gibi verilerin kaydedilmesi için save etmemiz gerekiyor. Ama tabi bunun yine daha kolay bir yolu mvcuttur.</p>


<pre><code>Idea.create(title:"Fikrim", description:"Süper bir fikir")
</code></pre>

<p class="silik">Create metodunu kullanarak hem new hem save bir arada yapılmış olur ve yukarıda yaptıklarımızı tek satırda yapmış oluruz.</p>


<pre><code>i.all // tüm idea'ları gösterir.
i.first // ilk idea görüntülenir.
i.last // son idea görüntülenir.
idea = Idea.find_by(title: 'Benim Fikrim') // belli isime göre bulma yapıyoruz.
ideas = Idea.where(title: 'Benim Fikrim', id:1) // bu şekilde de bulabiliriz.
idea = Idea.update(title: 'Yeni Fikir') // doğrudan update yaparız. save metoduna gerek kalmaz.
idea.destroy // oluşan veri uçuruldu.
idea.errors // kaydedilemeyen verilerin nedenlerini gösterir.
idea.valid? // validation olup olmadığını gösterir. true ya da false döner.
idea.save validate: false // model içinde yaptığımız validation'ları atlamaya yarar.
reload! // Model'de yapılan değişiklik olduğunda kullanırız.
idea.errors.full_messages // neden kaydetmediğimizi yani hataları bize gösterir.
idea.errors[:base] &lt;&lt; "This person is evil" // bu mesajı ekleyebiliriz ve bu herhangi bir veriye bağlı bir hata değildir.
</code></pre>

<p class="silik">Yukarıda olduğu gibi birçok komut vardır. Bunlar sadece birkaç tanesi. Konsolu kapatabiliriz artık. Bunun için exit yazmamız yeterlidir.</p>


<pre><code>gem 'annotate'
</code></pre>

<p class="silik">Bu gem sayesinde oluşturduğumuz veritabanındaki verileri model'de yorum satırı halinde görmemizi sağlıyor. Sadece işimizi kolaylaştımak için kullanabiliriz. Yoksa başka bir işlevselliği yoktur.</p>


<pre><code>validates :title, presence: true
</code></pre>

<p class="silik">Oluşturmuş olduğumuz idea model'i içine validasyonlar ekleyerek kullanıcı verileri girerken bir kontrol sağlayabiliriz. Burada da title boş bırakılamaz diye bir validasyon ekledik.</p>


<pre><code>validates :title, presence: {message: "bos bırakma"}, length: { minimum: 10}
</code></pre>

<p class="silik">Burada da peş peşe validasyon eklemeyi gösterebiliriz. Kullanıcıya boş bırakma diye kendimiz bir mesaj verdik. Beraberinde ise uzunluğun minimum 10 olacağını belirttik. Biliyorum bu iki durum birbirine zıt ama burada sadece bir örnek göstermek için böyle birşey kullanmıştık. İsterseniz kendiniz bunu maximum olarak değiştirebilirsiniz.</p>


<pre><code>rails g migration add_referal_to_ideas referal:string || rails g migration AddReferalToIdeas referal:string
</code></pre>

<p class="silik">Diyelim ki idea model'ine eklemeyi unuttuğumuz bir attribute var. Eee o zaman model'i silip tekrar mı yazıyoruz? Tabi ki hayır. Bunun için bir migration yazıyoruz eğer yapıyı bozmazsanız size dosya otomatik olarak dolu gelecektir. Burada yapıdan kastım ya alt çizgilerle ayırıyoruz ya da baş harflerini büyük yazıyoruz. Ayrıca isim gayet anlaşılır ideas tablosuna referal ekle şekline bu yapı önemlidir. Gelmezse de elle yazmak mümkündür.</p>


<pre><code>add_column :ideas, :referal, :string
</code></pre>

<p class="silik">Böyle bir satır eklenmiş olması gerekiyor. Eğer yoksa dediğim gibi kendimiz de yazabiliriz.</p>


<pre><code>rails db:migrate
</code></pre>

<p class="silik">Her migration'dan sonra da migrate işlemi yapmamız gerekiyor. Aksi halde yine bu verileri kullanamayız.</p>


<pre><code>rails g migration remove_referal_from_ideas
</code></pre>

<p class="silik">Eğer olurda yanlış bir veri eklemişsek yine model'i baştan yazmıyoruz ya da rollback yapma ihtiyacı duymuyoruz. Bunun için yine bir migration yazıyoruz ve attribute tablodan çıkartılıyor.</p>


<pre><code>remove_column :ideas, :referal
</code></pre>

<p class="silik">Yine migration içinde böyle bir satır oluşması gerekiyor. Eğer oluşmazsa yine elle yazabiliriz.</p>


<pre><code>rails g model Category name description
</code></pre>

<p class="silik">Category adında farklı bir model oluşturduk. Buradan farklı işlemleri yürütebiliriz.</p>


<pre><code>rails g migration change_name_to_title
</code></pre>

<p class="silik">Az önce name adında oluşturduğumuz veriyi title olarak değiştirmek istiyoruz. Bunun için yine bir migration yazdık.</p>


<pre><code>rename_column :categories, :name, :title
</code></pre>

<p class="silik">Yine migration içi bu şekilde olamalıdır. Eğer değilse yine elle yazılabilir. Ve unutmuyoruz ki her migration işlemlerinden sonra migrate yazpmamız gerekir.</p>


<pre><code>validates :color, inclusion: { in: %w(red blue green), message: "kırmızı mavi yeşil olabilir." }
</code></pre>

<p class="silik">Category model'i içine bir validasyon tanımladık ve bu validasyonla color attribute'e sadece belirlediğimiz renklerin yazılması kontrolünü yaptık. Yine bunu yapmak yerine selectbox kullanılabilir. Bu ara color attribute'i kendiniz ekleyebilirsiniz. Nede olsa migration eklemyi öğrendiniz :).</p>


<pre><code>validates :title, uniqueness: true
</code></pre>

<p class="silik">Yine category model'ine title benzersiz olmalıdır diye validasyon ekledik.</p>


<pre><code>validates :password, confirmation: true
</code></pre>

<p class="silik">Eğer password girişi istiyorsak kullanıcıdan ve password_confirmation diye bir field'imiz varsa bu eşleşmeyi yapmalıyız. Yoksa kullanıcı iki farklı veri girebilir.</p>


<pre><code>validate :check_planned_to
</code></pre>

<p><code>
  def check_planned_to </br>
        if planned_to.present? &amp;&amp; planned_to &lt; Date.today </br>
            errors.add(:planned_to, &ldquo;gecmise planlanamaz.&rdquo;)</br>
        end</br>
  end</br>
</code></p>

<p class="silik">Category model'ine check_planned_to adında bir metod yazdık ve burada planned_to attribute'i boş olamaz ve geçmişe planlanamaz şeklinede bir ayarlama yaptık. Kendimizde validasyon ekleyebiliriz.</p>


<p class="paragraf">Burada anlatılanlar gün gün yazılamamıştır. Bir kaç günlük yazılar vardır. Bundan sonraki yazılarımda günlük olarak anlatılacaktır.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github]]></title>
    <link href="http://berkanacar.github.io/blog/2016/08/23/github/"/>
    <updated>2016-08-23T17:50:01+03:00</updated>
    <id>http://berkanacar.github.io/blog/2016/08/23/github</id>
    <content type="html"><![CDATA[<h3>Github Komutları</h3>

<p>Sizlere Linux Yaz Kampında anlatılanları anlatacağım. Öncelikle github komutlarından başlamak istedim. Daha önceki yazımda bunlara biraz değinmiştim. Fakat yeni öğrendiğim bazı şeylerde var. Bunlarıda size aktarmak istiyorum.</p>

<pre><code>git config --global user.name
</code></pre>

<p class="silik">Bu komut ile global kullanıcı adımızı öğrenebiliriz.</p>


<pre><code>git config --global user.email
</code></pre>

<p class="silik">Aynı şekilde global mail adresimizi öğrenebiliriz.</p>


<pre><code>git log
</code></pre>

<p class="silik">Yapmış olduğumuz tüm commitleri görmek istiyorsak bu komutu kullanmak yeterlidir. Burada commit numaraları da mevcuttur. Daha sonra istediğimiz bir commit'e dönmek için o numaraları kullanacağız. q tuşuna basarak tekrar komutlarımızı yazabiliriz.</p>


<pre><code>git reset c79836bc4f5194e7ad7789652610c7aaaa6baa28
</code></pre>

<p class="silik">Commitlerimize baktık. Eğer istemediğimiz bir commit yaptıysak ya da yanlış commit mesajı yazmışsak hiç endişelenmeyin. Bunun için bu komutu kullanbiliriz. Bu komutla seçmiş olduğumuz son commit'e geri döneriz ve değişikliklerimiz commit'lenmek için bizi bekliyor olacaktır. Sonra tekrar commit edebiliriz. Burada reset'ten sonra yazanlar yukarıdaki komutla öğrendiğimiz commit numaralarıdır.</p>


<pre><code>git reset -- hard c79836bc4f5194e7ad7789652610c7aaaa6baa28
</code></pre>

<p class="silik">Eğer ben değişikliklerimi korumak istemiyorum. Son commit'te ne yaptıysam onlar olsun. Ondan sonra yapılanlar gitsin diyorsanız bu komutu kullanabilirisiniz. Bunu kullanırken onu yapmak istediğinize emin olmalısınız. Aksi halde geri aldığınız committen sonraki tüm değişiklikler kaybolur ve yeniden yazmak zorunda kalırsınız.</p>


<pre><code>git diff
</code></pre>

<p class="silik">Commit'lemeden önce yapmış olduğumuz değişiklikleri bize gösterir. git status'den farkı o sadece dosyadaki değişiklikleri gösterirken bununla dosya içindeki değişiklikleri görebiliriz.</p>


<pre><code>git checkout .
</code></pre>

<p class="silik">Yapmış olduğumuz değişiklikleri silmek istiyorsak yani son commit'e geri dönmek istiyorsak farklı bir yöntem de bu komutu kullanmaktır. Burada sadece commit'ten sonra bir değişiklik yapılmışsa onlar geri alınacaktır. Bunu kullanırken de dikkatli olmalısınız. Aksi halde yaptığınız tüm değişiklikleri kaybedersiniz.</p>


<pre><code>git checkout -b branch_name
</code></pre>

<p class="silik">Yeni bir branch açmak için kullanırız. Branch_name yazan yere isim vererek kullanbiliriz.</p>


<pre><code>git checkout branch_name
</code></pre>

<p class="silik">Branch'ler arası geçiş yapmak için kullanırız. Burada birden fazla açılmış branch'lerimiz varsa bu komut sayesinde geçiş yapabiliriz.</p>


<pre><code>git branch
</code></pre>

<p class="silik">Bu komut ile hangi branch'de olduğumuzu öğrenebiliriz. Böylece işlemlerimizi kolaylıştırabiliriz.</p>


<pre><code>git push origin branch_name
</code></pre>

<p class="silik">Çalışmış olduğumuz branch'e değişikliklerimizi göndermek için bu komutu kullanabiliriz.</p>


<p>Origin bizim karşı taraftaki repomuzu gösterir. Master ise hangi branch'imize ekleme yapacağımızı gösterir.</p>


<pre><code>git merge branch_name
</code></pre>

<p class="silik">Branch'e gönderilen kodları merge etmek için bu komutu kullanırız.</p>


<pre><code>git pull origin branch_name
</code></pre>

<p class="silik">Branch adını yazarak o branch'e commit'lenen kodu kendimize almak için kullanırız.</p>


<p>Yapabileceklerimiz tabi ki bunlarla sınırlı değildir. Daha fazla şeyler yapmak istiyorsak kendimizi daima geliştirmeliyiz ve bunun için kaynak olarak try.github.io adresinden daha fazla bilgi öğrenebiliriz.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Workshop]]></title>
    <link href="http://berkanacar.github.io/blog/2016/07/31/workshop/"/>
    <updated>2016-07-31T22:29:14+03:00</updated>
    <id>http://berkanacar.github.io/blog/2016/07/31/workshop</id>
    <content type="html"><![CDATA[<p><html>
<head>
    <title></title>
</head>
<body>
    <h3>GitHub</h3>
    <p class="paragraf">
        Linux işletim sistemlerinde GitHub'a proje nasıl atılır? Yazımda bu işlemleri terminalden yapacağız. Ve tabiki git'e bir proje eklemek istiyorsak bir Git hesabımız olmalıdır. GitHub üyeliğimiz yoksa github.com adresinden yeni bir üyelik açarak başlayabiliriz. Daha Git'ten sonra yeni bir depo açıyoruz ve bir isim belirliyoruz. Daha sonra Git'e eklemek istediğimiz dosya dizini içine girdikten sonra aşağıdaki kodları çalıştırmalıyız.
    </p>
    <b>
        $git init
    </b>
    <p class="silik">
        bu kod satırı ile o dosya içerisinde git'e yeni bir depo(repository) açarız.
    </p>
    <b>
        $git status
    </b>
    <p class="silik">
        bu komut ile git'e eklenecek dosyaların durumuna bakarız. Dosyalar üzerinde bir değişiklik olmuşsa ya da daha önce ekleme olmamışsa kırmızı renkli dosyaların mevcut olduğunu göreceksiniz.
    </p>
    <b>
        $git add .
    </b>
    <p class="silik">
        dosyalrı Git'e eklemek için devam ediyoruz.
    </p>
    <b>
        $git status
    </b>
    <p class="silik">
        tekrarbu komut ile dosyaların yeşil renkli olduğunu görürüz. Bunun anlamı dosyaların atılmaya hazır olduğu anlamına gelir.
    </p>
    <b>
        $git commit -m &ldquo;your_commit_message&rdquo;
    </b>
    <p class="silik">
        Git'te commit mesajlarının önemli bir yeri vardır Mesajların İngilizce ve emir kipli olmasına dikkat etmeliyiz. Bu mesajlar sayesinde projenizin adımları dışarıdan birisi neler yaptığına ve değişikliklerine bakarak anlayabilir. Hatta GitHub'dan iş teklifi bile alabilirsiniz.
    </p>
    <p class="paragraf">
        Şu ana kadar yapılan tüm işlemler local'dedir. Daha Git'e gönderim yapılmamıştır. Şimdi gelelim bu kodaların GitHub sayfamızdaki projede görünmesine.
    </p>
    <b>
        $git remote add origin git@github.com:your_username/your_project_name.git
    </b>
    <p class="silik">
        şimdi Git ile bağlantısını kuralım. Zaten bu oluşturduğunuz boş depo içerisinde görünecektir. O sayfadan kopyala-yapıştır yaparak alabilirsiniz.
    </p>
    <b>
        $git push -u origin master
    </b>
    <p class="silik">
        ve son olarak dosyaları GitHub'a gönderiyoruz. GitHub'daki depodan kontol edebiliriz. Proje üzerinde herhangi bir değişiklik yaptıktan sonra değişiklikleri güncellemek için yukarıdaki adımları tekrar yaparak devam edebilirsiniz. Sadece &lsquo;git remote&rsquo; komutunu ilkadımda kullanıyoruz daha sonra yazmıyoruz.
    </p>
    <h3>MVC (Model:View:Controller)</h3>
    <p class="paragraf">
        Öncelikle bu katmanların ne yaptığından kısaca bahsedelim. Model katmanında projemizin veri tabanı işlemleri yürütülür. Controller katmanı ile sayfaların yönetildiği kısımdır. View katmanı ise tüm bu işlemlerin kullanıcı tarafından görülen kısmıdır. Tüm bunların çalışma mantığı ise Client(kullanıcı) tarafından gönderilen istek önce controller'a ulaşır(request). Daha sonra controller verileri toplamak(data collection) için model'e başvurur ve model ise database'den yani veritabanından bilgileri alır. Daha sonra model controller'a gönderir. Daha sonra view katmanına ulaşır. Orada yazılan html, css vb. yazılan kodalara göre görsel kısım tekrar controller aracılığı ile client'a ulaşır(response).
    </p>
    <p class="paragraf">
        NedeN MVC kullanıyoruz diyecek olursak temiz kod yazmak için kullanışlı, hızlı ve başkaları tarafından okunabilir bir kod yazmak öncelikli planlarımız arasında olmalıdır. Bu sayede temiz kod yazmış olacağız. Ve bu katmanlarla farklı yerlerden birbirlerini yöneterek işlem kolaylığı sağlayacaktır. Bu sayede günlerce uğraştığımız işlemleri daha kısa sürede tamamlayabiliriz.
    </p>
    <h3>ORM (Object Relational Mapping)</h3>
    <p class="paragraf">
        Kısaca orm bizim yerimize nesneleri ilişkisel veritabanı tablomuza bağlayan ve veri alış-verişini sağlayan bir tekniktir. Avantajları:
        <li>
            Nesneye dayalı bir programlama metodu sunarak işlerimizi kolaylaştırıyor.
        </li>
        <li>
            Yazdığımız kodun veritabanı çeşitleriyle bir alakası yoktur.
        </li>
        <li>
            En önemlisi ise veritabanı kodları yazmadan çok kolay ve basit bir şekilde veritabanına bağlı bir uygulama yazılabilir.
        </li>
    </p>
    <h3>GEM CYBELE</h3>
    <p class="paragraf">
        Bu gem ile birlikte admin ve user yapıları hazır olarak kurulmuş ve ayarlamaları yapılmış bir şekilde kullanıma hazırdır. Tek yapmamız gereken bu gem'i kurdaktan sonra projemizi içine dahil etmek olacaktır. Bu gem sayesinde projelerimizi daha hızlı bir şekilde geliştirmemiz mümkün olacaktır. Biraz projede geçen gem'lerden bahsedelim.
        <li>
            gem &lsquo;devise&rsquo;: User giriş-çıkış, hesap açma işlemleri için yaygın olarak kullanılan bir gem'dir.
        </li>
        <li>
            gem &lsquo;paperclip&rsquo;: Dosya eklemek için kullanılan gem'dir.
        </li>
        <li>
            gem &lsquo;hierapolis-rails&rsquo;: Projemize dışarıdan yönetici olarak erişerek kullanıcıları ve bazı durumları yönetmek için kullanılır.
        </li>
    </p>
    <p class="paragraf">
        Yukarıda bahsi geçen Cybele içindeki gem'lerden sadece bir kaçıdır. Diğer gem'leri github/lab2023/cybele sayfasını ziyaret ederek inceleyebilirsiniz. Şimdi gelelim bu gem'i nasıl kuracağımıza. Kurulumu yapmadan önce ruby ve rails versiyonunuzu kontrol etmeyi unutmayınız.
        <li>
            Ruby ~> 2.3
        </li>
        <li>
            Rails ~> 4.2
        </li>
        En azından yukarıdaki versiyonların mevcut olması gerekir.
    </p>
    <p class="paragraf">
        Versiyon kontrollerini yaptıktan sonra şimdi cybele gem'ini kurabiliriz. Bu işlemleri yine terminalden yapıyoruz.</br></br>
    </p>
    <p class="silik">
        $gem install cybele
    </p>
    <p>
        Şimdi kurduğumuz gem ile bir proje oluşturalım.
    </p>
    <p class="silik">
        $cybele project_name
    </p>
    <p>
        Şimdi gelelim projeyi çalıştırmya. Sırasıyla aşağıdaki kodları terminalde çalıştıralım.
    </p>
    <p>
        $bundle install
    </p>
    <p>
        $redis-server
    </p>
    <p>
        $rake sidekiq:start
    </p>
    <p>
        $rake db:create
    </p>
    <p>
        $rake db:migrate
    </p>
    <p>
        $rake dev:seed
    </p>
    <p>
        $rails s
    </p>
    <p>
        Yukarıdaki adımların eksiksiz yapıldığından emin olduktan sonra cybele çalışmaya hazır hale gelmiştir. Artık üzerinde değişiklik yapabilir ve üzerine farklı gem'ler ya da farklı özellikler tanımlayabiliriz.
    </p></p>

<p></body>
</html></p>
]]></content>
  </entry>
  
</feed>
